" --- Base config --- "

" XDG compliant environment
set runtimepath^=$HOME/.config/vim
set runtimepath+=$HOME/.config/vim/after
" Do not process vimfiles dir on Windows
set runtimepath-=$HOME/vimfiles
set runtimepath-=$HOME/vimfiles/after
if has('gui_running')
  source $HOME/.config/vim/gvimrc
endif
let &g:directory=$HOME . '/.cache/vim'
let &g:undodir=&g:directory . '/undo//'
let &g:backupdir=&g:directory . '/backup//'
let &viminfo=&viminfo . ',n' . &g:directory . '/viminfo'
let &g:directory.='/swap//'
" Create directories if they don't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
set encoding=utf-8             " Enforce UTF-8
set autoindent                 " Absent filetype-specific indenting, new lines inherit above indentation
set cmdheight=2                " Command window height 2 lines avoids many cases of <Enter> to continue
set laststatus=2               " Always display the status line, even if only one window is displayed
set hlsearch                   " Switch on search pattern highlighting.
set cryptmethod=blowfish2      " Set enrcyption method to blowfish
set ignorecase                 " Make vim case insensitive...
set smartcase                  " ...Except when we explicitly type a capital
set incsearch                  " Jump to matches as you search
set showbreak=>\               " Indicate a line is wrapped with '> '
set breakindent                " Indent a wrapped line
set linebreak                  " Wrap per word, not character (configured with 'breakat')
set tabstop=2                  " Indent tabs less
set shiftwidth=2               " Indent tabs less
set expandtab                  " Use spaces instead of tabs
set backspace=indent,eol,start " Make backspace work as expected
let c_comment_strings=1        " Highlight strings inside C comments
" Theme
colorscheme torte
" quick run terminal
nnoremap <silent> <Leader>r :.terminal ++noclose ++eof=exit ++shell<CR>
vnoremap <silent> <Leader>r :'<,'>terminal ++noclose ++eof=exit ++shell<CR>
" My own mru solution using dmenu
"noremap <C-p> :wv<CR>:e <C-r>=system("mruvim p")<CR><CR>
" Exit insert mode with jj
inoremap jj <Esc>
" Elevate vim under windows. Update me to use powershell elevation
"noremap <C-e> :mksession! ~/vimfiles/elevate.vim<Return>:silent exec '!elevate.exe ' . v:progname '-S C:/Users/Link/vimfiles/elevate.vim --cmd "let $HOME=''C:\Users\Link\''"'<Return>:q<Return>
" Don't write viminfo while editing an encrypted file
augroup Security
  autocmd vimleavepre * if strlen(&key) | set viminfo= | endif
augroup End

" --- Plugin config --- "

" Vim-plug package manager
call plug#begin()
"UI
  Plug 'bling/vim-airline'               " Fancy statusbar
  Plug 'junegunn/goyo.vim'               " Distraction free reading and writing
  Plug 'junegunn/limelight.vim'          " Highlight current paragraph
"Tools
  Plug 'chilicuil/vim-sprunge'           " Dump buffer to a pastebin
  Plug 'christoomey/vim-titlecase'       " Capitalize operator
  Plug 'godlygeek/tabular'               " Format tables
  Plug 'gpanders/vim-oldfiles'           " Improve internal file history
  Plug 'reedes/vim-pencil'               " Auto apply textwidth formatting in real time
  Plug 'tpope/vim-commentary'            " Comment/uncomment a range
  Plug 'tpope/vim-surround'              " Commands to manipulate surrounding tags/quotes/other
  Plug 'tpope/vim-vinegar'               " Improve internal file browser
"Words
  Plug 'christoomey/vim-sort-motion'     " Sort motion
  Plug 'michaeljsmith/vim-indent-object' " Indent object
"Syntax
  Plug 'PProvost/vim-ps1'                " Powershell support
  Plug 'plasticboy/vim-markdown'         " Markdown support
call plug#end()

" Close Oldfiles split after use
augroup oldfiles
  autocmd!
  autocmd FileType qf if w:quickfix_title =~# 'Oldfiles' | nnoremap <buffer> <CR> <CR>:cclose<CR> | endif
augroup END

" Marry goyo and limelight
  " TODO call pencil and set spell here?
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Load certain plugins for Markdown
  " TODO: add toolbar maybe, toggle things
augroup pencil
  autocmd!
  autocmd FileType markdown call pencil#init()
    \| Goyo 80
    \| set spell
augroup END

" Grey comments, must be declared after Vim-plug
highlight Comment ctermfg=8 guifg=#808080
